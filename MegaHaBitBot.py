from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import sqlite3
from config import API_TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ config.py
import datetime as dt
from collections import defaultdict


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = 'MegaHaBitBot.db'

conn = sqlite3.connect(DATABASE_PATH)
c = conn.cursor()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—á–∫–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
emoji_points = {
    "üü©": 20,
    "üü®": 15,
    "üüß": 10,
    "üü•": 7,
    "üü´": 5,
    "‚¨õÔ∏è": 4,
    "üü™": 3,
    "üü¶": 2,
    "‚¨úÔ∏è": 1
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ a_users
def add_user_to_db(user_id, first_name, last_name, tg_nick):
    c.execute("SELECT * FROM a_users WHERE tg_user_id=?", (user_id,))
    existing_user = c.fetchone()
    if existing_user:
        c.execute("UPDATE a_users SET tg_firstname=?, tg_lastname=?, tg_nick=? WHERE tg_user_id=?", (first_name, last_name, tg_nick, user_id))
    else:
        c.execute("INSERT INTO a_users (tg_user_id, tg_firstname, tg_lastname, tg_nick) VALUES (?, ?, ?, ?)", (user_id, first_name, last_name, tg_nick))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    tg_nick = message.from_user.username

    add_user_to_db(user_id, first_name, last_name, tg_nick)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–°–æ–Ω", callback_data="sleep"),
        types.InlineKeyboardButton(text="–û–≤–æ—â–∏", callback_data="vegetables"),
        types.InlineKeyboardButton(text="–ê–ª–∫–æ–≥–æ–ª—å", callback_data="alcohol"),
        types.InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ", callback_data="smoking"),
        types.InlineKeyboardButton(text="–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", callback_data="exercise"),
    ]
    for button in buttons:
        keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    welcome_text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ MegaHaBitBot'–µ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
    await message.reply(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–°–æ–Ω"
@dp.callback_query_handler(lambda c: c.data == 'sleep')
async def handle_sleep(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    time_buttons = [
        types.InlineKeyboardButton("üü©(22-23)", callback_data="22-23"),
        types.InlineKeyboardButton("üü®(23-00)", callback_data="23-00"),
        types.InlineKeyboardButton("üüß(00-01)", callback_data="00-01"),
        types.InlineKeyboardButton("üü•(01-02)", callback_data="01-02"),
        types.InlineKeyboardButton("üü´(02-03)", callback_data="02-03"),
        types.InlineKeyboardButton("‚¨õÔ∏è(04-05)", callback_data="04-05"),
        types.InlineKeyboardButton("üü™(06-07)", callback_data="06-07"),
        types.InlineKeyboardButton("üü¶(07-08)", callback_data="07-08"),
        types.InlineKeyboardButton("‚¨úÔ∏è(09-10)", callback_data="09-10"),
    ]
    for button in time_buttons:
        keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞:", reply_markup=keyboard)

def update_or_insert_sleep_data(user_id, sleep_emoji):
    today_date = dt.datetime.now().strftime('%Y-%m-%d')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("SELECT * FROM b_stats WHERE date=? AND tg_user_id=?", (today_date, user_id))
    existing_record = c.fetchone()
    
    if existing_record:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ sleep
        c.execute("UPDATE b_stats SET sleep=? WHERE date=? AND tg_user_id=?", (sleep_emoji, today_date, user_id))
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        c.execute("INSERT INTO b_stats (date, tg_user_id, sleep) VALUES (?, ?, ?)", (today_date, user_id, sleep_emoji))
    
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∞
@dp.callback_query_handler(lambda c: c.data in ["22-23", "23-00", "00-01", "01-02", "02-03", "04-05", "06-07", "07-08", "09-10"])
async def handle_sleep_time(callback_query: types.CallbackQuery):
    sleep_emoji_mapping = {
        "22-23": "üü©",
        "23-00": "üü®",
        "00-01": "üüß",
        "01-02": "üü•",
        "02-03": "üü´",
        "04-05": "‚¨õÔ∏è",
        "06-07": "üü™",
        "07-08": "üü¶",
        "09-10": "‚¨úÔ∏è",
    }
    user_id = callback_query.from_user.id
    sleep_emoji = sleep_emoji_mapping[callback_query.data]
    update_or_insert_sleep_data(user_id, sleep_emoji)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í—Ä–µ–º—è —Å–Ω–∞ {sleep_emoji} –∑–∞–ø–∏—Å–∞–Ω–æ.")

def update_or_insert_vegetable_data(user_id, vegetable_emoji):
    today_date = dt.datetime.now().strftime('%Y-%m-%d')
    
    c.execute("SELECT * FROM b_stats WHERE date=? AND tg_user_id=?", (today_date, user_id))
    existing_record = c.fetchone()
    
    if existing_record:
        c.execute("UPDATE b_stats SET veg=? WHERE date=? AND tg_user_id=?", (vegetable_emoji, today_date, user_id))
    else:
        c.execute("INSERT INTO b_stats (date, tg_user_id, veg) VALUES (?, ?, ?)", (today_date, user_id, vegetable_emoji))
    
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–û–≤–æ—â–∏"
@dp.callback_query_handler(lambda c: c.data == 'vegetables')
async def handle_vegetables(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    veg_buttons = [
        types.InlineKeyboardButton("üü©(5+ –æ–≤–æ—â–µ–π)", callback_data="5+"),
        types.InlineKeyboardButton("üü®(4 –æ–≤–æ—â–∞)", callback_data="4"),
        types.InlineKeyboardButton("üüß(3 –æ–≤–æ—â–∞)", callback_data="3"),
        types.InlineKeyboardButton("üü•(2 –æ–≤–æ—â–∞)", callback_data="2"),
        types.InlineKeyboardButton("üü´(1 –æ–≤–æ—â)", callback_data="1"),
    ]
    for button in veg_buttons:
        keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –æ–≤–æ—â–µ–π:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–≤–æ—â–µ–π
@dp.callback_query_handler(lambda c: c.data in ["5+", "4", "3", "2", "1"])
async def handle_vegetable_count(callback_query: types.CallbackQuery):
    veg_emoji_mapping = {
        "5+": "üü©",
        "4": "üü®",
        "3": "üüß",
        "2": "üü•",
        "1": "üü´",
    }
    user_id = callback_query.from_user.id
    vegetable_emoji = veg_emoji_mapping[callback_query.data]
    update_or_insert_vegetable_data(user_id, vegetable_emoji)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≤–æ—â–µ–π {vegetable_emoji} –∑–∞–ø–∏—Å–∞–Ω–æ.")

def update_or_insert_alcohol_data(user_id, alcohol_emoji):
    today_date = dt.datetime.now().strftime('%Y-%m-%d')
    
    c.execute("SELECT * FROM b_stats WHERE date=? AND tg_user_id=?", (today_date, user_id))
    existing_record = c.fetchone()
    
    if existing_record:
        c.execute("UPDATE b_stats SET alco=? WHERE date=? AND tg_user_id=?", (alcohol_emoji, today_date, user_id))
    else:
        c.execute("INSERT INTO b_stats (date, tg_user_id, alco) VALUES (?, ?, ?)", (today_date, user_id, alcohol_emoji))
    
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ê–ª–∫–æ–≥–æ–ª—å"
@dp.callback_query_handler(lambda c: c.data == 'alcohol')
async def handle_alcohol(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    alcohol_buttons = [
        types.InlineKeyboardButton("üü©(–Ω–µ –ø–∏–ª)", callback_data="none"),
        types.InlineKeyboardButton("üü®(1 –±–∞–Ω–∫–∞ –ø–∏–≤–∞)", callback_data="1beer"),
        types.InlineKeyboardButton("üüß(3 –±–∞–Ω–∫–∏ –ø–∏–≤–∞)", callback_data="3beer"),
        types.InlineKeyboardButton("üü•(1 —Ä—é–º–∫–∞)", callback_data="1shot"),
        types.InlineKeyboardButton("üü´(3 —Ä—é–º–∫–∏)", callback_data="3shots"),
        types.InlineKeyboardButton("‚¨õÔ∏è(1 –±—É—Ç—ã–ª—å)", callback_data="1bottle"),
    ]
    for button in alcohol_buttons:
        keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª–∫–æ–≥–æ–ª—è
@dp.callback_query_handler(lambda c: c.data in ["none", "1beer", "3beer", "1shot", "3shots", "1bottle"])
async def handle_alcohol_amount(callback_query: types.CallbackQuery):
    alcohol_emoji_mapping = {
        "none": "üü©",
        "1beer": "üü®",
        "3beer": "üüß",
        "1shot": "üü•",
        "3shots": "üü´",
        "1bottle": "‚¨õÔ∏è",
    }
    user_id = callback_query.from_user.id
    alcohol_emoji = alcohol_emoji_mapping[callback_query.data]
    update_or_insert_alcohol_data(user_id, alcohol_emoji)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è {alcohol_emoji} –∑–∞–ø–∏—Å–∞–Ω–æ.")

def update_or_insert_smoking_data(user_id, smoking_emoji):
    today_date = dt.datetime.now().strftime('%Y-%m-%d')
    
    c.execute("SELECT * FROM b_stats WHERE date=? AND tg_user_id=?", (today_date, user_id))
    existing_record = c.fetchone()
    
    if existing_record:
        c.execute("UPDATE b_stats SET smok=? WHERE date=? AND tg_user_id=?", (smoking_emoji, today_date, user_id))
    else:
        c.execute("INSERT INTO b_stats (date, tg_user_id, smok) VALUES (?, ?, ?)", (today_date, user_id, smoking_emoji))
    
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ö—É—Ä–µ–Ω–∏–µ"
@dp.callback_query_handler(lambda c: c.data == 'smoking')
async def handle_smoking(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    smoking_buttons = [
        types.InlineKeyboardButton("üü©(–Ω–µ –∫—É—Ä–∏–ª)", callback_data="no_smoking"),
        types.InlineKeyboardButton("üü®(—á–∏—Ç–∞–ª –ê–ª–ª–µ–Ω–∞ –ö–∞—Ä—Ä–∞)", callback_data="read_carr"),
    ]
    for button in smoking_buttons:
        keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∫—É—Ä–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data in ["no_smoking", "read_carr"])
async def handle_smoking_status(callback_query: types.CallbackQuery):
    smoking_emoji_mapping = {
        "no_smoking": "üü©",
        "read_carr": "üü®",
    }
    user_id = callback_query.from_user.id
    smoking_emoji = smoking_emoji_mapping[callback_query.data]
    update_or_insert_smoking_data(user_id, smoking_emoji)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç—É—Å –∫—É—Ä–µ–Ω–∏—è {smoking_emoji} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")

def update_or_insert_fitness_data(user_id, fitness_emoji):
        today_date = dt.datetime.now().strftime('%Y-%m-%d')
        
        c.execute("SELECT * FROM b_stats WHERE date=? AND tg_user_id=?", (today_date, user_id))
        existing_record = c.fetchone()
        
        if existing_record:
            c.execute("UPDATE b_stats SET fit=? WHERE date=? AND tg_user_id=?", (fitness_emoji, today_date, user_id))
        else:
            c.execute("INSERT INTO b_stats (date, tg_user_id, fit) VALUES (?, ?, ?)", (today_date, user_id, fitness_emoji))
        conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞"
@dp.callback_query_handler(lambda c: c.data == 'exercise')
async def handle_exercise(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    exercise_buttons = [
        types.InlineKeyboardButton("üü©(2+ —á–∞—Å–∞ –≤ —Ñ–∏—Ç–Ω–µ—Å–µ)", callback_data="2h+"),
        types.InlineKeyboardButton("üü®(1+ —á–∞—Å –≤ —Ñ–∏—Ç–Ω–µ—Å–µ)", callback_data="1h+"),
        types.InlineKeyboardButton("üüß(30+ –º–∏–Ω –ª—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)", callback_data="30min+"),
        types.InlineKeyboardButton("üü•(15+ –º–∏–Ω –ª—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)", callback_data="15min+"),
        types.InlineKeyboardButton("üü´(5+ –º–∏–Ω –ª—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)", callback_data="5min+"),
        types.InlineKeyboardButton("‚¨õÔ∏è(–≤—Å—Ç–∞–ª —Ä–∞–∑–º—è–ª—Å—è)", callback_data="stretched"),
    ]
    for button in exercise_buttons:
        keyboard.add(button)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data in ["2h+", "1h+", "30min+", "15min+", "5min+", "stretched"])
async def handle_fitness_level(callback_query: types.CallbackQuery):
    fitness_emoji_mapping = {
        "2h+": "üü©",
        "1h+": "üü®",
        "30min+": "üüß",
        "15min+": "üü•",
        "5min+": "üü´",
        "stretched": "‚¨õÔ∏è",
    }
    user_id = callback_query.from_user.id
    fitness_emoji = fitness_emoji_mapping[callback_query.data]
    update_or_insert_fitness_data(user_id, fitness_emoji)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {fitness_emoji} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /toptop
@dp.message_handler(commands=['toptop'])
async def handle_toptop(message: types.Message):
    top_scores = calculate_top_scores()
    result_message = "üèÜ Top Users by Activity Points:\n\n"
    for rank, (user_id, points) in enumerate(top_scores, start=1):
        result_message += f"{rank}. User {user_id}: {points} points\n"
    await message.reply(result_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def calculate_top_scores():
    with sqlite3.connect(DATABASE_PATH) as conn:
        c = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã b_stats
        c.execute("SELECT tg_user_id, sleep, veg, alco, smok, fit FROM b_stats")
        user_scores = defaultdict(int)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for row in c.fetchall():
            user_id = row[0]
            for activity in row[1:]:
                if activity and activity in emoji_points:
                    user_scores[user_id] += emoji_points[activity]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
        sorted_scores = sorted(user_scores.items(), key=lambda item: item[1], reverse=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return sorted_scores[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
